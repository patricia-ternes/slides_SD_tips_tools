---
format: 
  revealjs:
    theme: [beige, styles.scss]
    navigation-mode: linear
    controls-layout: bottom-right
    controls: true
    # logo: assets/img/logo/rc-logo.png
    footer: "[Book][book] | [GitHub][book-github]"
    
pagetitle: Software Development in a Nutshell
---

# Software Development in a Nutshell {.center}

**Training Material**:
[![JupterBook Logo](assets/img/logo/jb-logo.png){height=1em}][book]
[![GitHub Logo](assets/img/logo/gh-logo.png){height=1em}][book-github]

**Instructors**:

- Dr Patricia Ternes <p.ternesdallagnollo@leeds.ac.uk>

## Software Development Life Cycle (SDLC)

![](assets/img/sd-nutshell/software-lifecicle.jpg)

##

::: {.panel-tabset}

### Ideation

:::: {.columns }
::: {.column width="80%"}
::: {.subhead}
What are we going to do?
:::
<br>

- Brainstorming
- Research
:::

::: {.column width="20%"}
![](assets/img/sd-nutshell/ideation.jpg)
:::
::::

### Requirements

:::: {.columns}
::: {.column width="80%"}
::: {.subhead}
How are we going to do it?
:::
<br>

Some topics to help define requirements include:

- final goal
- project scope (how to reach the final goal)
- what is feasible (and how)
- what is priority
- what resources are available
- deadlines
- potential risks
:::

::: {.column width="20%"}
![](assets/img/sd-nutshell/requirements.png)
:::
::::

::: {.warning}
<br> <br>
Warning: Each person involved in the project may have a different need.
:::

### Design

:::: {.columns}
::: {.column width="80%"}

::: {.subhead}
What is the software architecture?
:::
<br>

When designing software, the object-oriented approach is a common programming paradigm.

<br>
Object-oriented components:

- Classes: A user-defined type
- Object instances: A particular object instantiated from a class.
- Methods: A function which is “built in” to a class
- Constructor: A special method called when instantiating a new object

<br>
Some principles: abstraction, encapsulation, decomposition, generalisation

:::

::: {.column width="20%"}
![](assets/img/sd-nutshell/design.png)
See more:
[![](assets/img/sd-nutshell/uml.png)](https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/)
:::

::::

### Development

:::: {.columns}

::: {.column width="80%"}

::: {.subhead}
Is this where the fun begins?
:::
<br>

# Take your time

:::

::: {.column width="20%"}
![](assets/img/sd-nutshell/dev.png)
:::
::::

Development is usually the most time consuming step in a Software Development Life Cycle.

### Test

:::: {.columns}

::: {.column width="80%"}

::: {.subhead}
Is this software good?
:::
<br>

In this step, errors and failures are identified by exposing the code to an environment similar to the end-user experience.

<br>
There are several types of testing, some examples include:

- **Unit testing:** are all components working?
- **Integration testing:** are all components working when fitted together?
- **Performance testing:** how does the software perform against different workloads? It is fast? Stable?
- **Functional testing:** is the software aligned with Software Requirement Specification?
:::

::: {.column width="20%"}
![](assets/img/sd-nutshell/test.png)
:::

::::

### Deployment

:::: {.columns}
::: {.column width="80%"}
::: {.subhead}
Can other people use my code?
:::
<br>

You can use platforms like [GitHub](https://github.com/) to release your software.

<br>

- The **functionality** of the software is linked to **several specifications** related to the operating system and versions of packages and other software related to the project.
- **Listing these specifications will help** others to replicate the environment in which the software was developed.
:::

::: {.column width="20%"}
![](assets/img/sd-nutshell/deployment.png)
:::
::::

### Maintenance

:::: {.columns}
::: {.column width="80%"}
::: {.subhead}
Is it over?
:::
<br>

We can classify maintenance into a few categories:

- **Corrective:** fix reported errors/failures.
- **Preventive:** regular checks and fixes.
- **Perfective:** optimize implemented features, adding new features.
- **Adaptive:** keep the software updated according to changes external to the project (new programming language version, new regulation, etc.).
:::
::: {.column width="20%"}
![](assets/img/sd-nutshell/maintenance.png)
:::
::::
:::

<!-- personalized links -->
[book]: https://arctraining.github.io/SD_tips_tools/intro.html
[book-github]: https://github.com/ARCTraining/SD_tips_tools
