[
  {
    "objectID": "1-SD_nutshell.html#software-development-life-cycle-sdlc",
    "href": "1-SD_nutshell.html#software-development-life-cycle-sdlc",
    "title": "Slides: Software development - good practices, tips & tools",
    "section": "Software Development Life Cycle (SDLC)",
    "text": "Software Development Life Cycle (SDLC)"
  },
  {
    "objectID": "1-SD_nutshell.html#section",
    "href": "1-SD_nutshell.html#section",
    "title": "Slides: Software development - good practices, tips & tools",
    "section": "",
    "text": "IdeationRequirementsDesignDevelopmentTestDeploymentMaintenance\n\n\n\n\n\nWhat are we going to do?\n\n\n\nBrainstorming\nResearch\n\n\n\n\n\n\n\n\n\n\nHow are we going to do it?\n\n\nSome topics to help define requirements include:\n\nfinal goal\nproject scope (how to reach the final goal)\nwhat is feasible (and how)\nwhat is priority\nwhat resources are available\ndeadlines\npotential risks\n\n\n\n\n\n\n  Warning: Each person involved in the project may have a different need.\n\n\n\n\n\n\nWhat is the software architecture?\n\n\nWhen designing software, the object-oriented approach is a common programming paradigm.\n Object-oriented components:\n\nClasses: A user-defined type\nObject instances: A particular object instantiated from a class.\nMethods: A function which is “built in” to a class\nConstructor: A special method called when instantiating a new object\n\n Some principles: abstraction, encapsulation, decomposition, generalisation\n\n See more: \n\n\n\n\n\n\n\nIs this where the fun begins?\n\n\n\nTake your time\n\n\n\n\n\n\n\nDevelopment is usually the most time consuming step in a Software Development Life Cycle.\n\n\n\n\n\nIs this software good?\n\n\nIn this step, errors and failures are identified by exposing the code to an environment similar to the end-user experience.\n There are several types of testing, some examples include:\n\nUnit testing: are all components working?\nIntegration testing: are all components working when fitted together?\nPerformance testing: how does the software perform against different workloads? It is fast? Stable?\nFunctional testing: is the software aligned with Software Requirement Specification?\n\n\n\n\n\n\n\n\n\n\nCan other people use my code?\n\n\nYou can use platforms like GitHub to release your software.\n\n\nThe functionality of the software is linked to several specifications related to the operating system and versions of packages and other software related to the project.\nListing these specifications will help others to replicate the environment in which the software was developed.\n\n\n\n\n\n\n\n\n\n\nIs it over?\n\n\nWe can classify maintenance into a few categories:\n\nCorrective: fix reported errors/failures.\nPreventive: regular checks and fixes.\nPerfective: optimize implemented features, adding new features.\nAdaptive: keep the software updated according to changes external to the project (new programming language version, new regulation, etc.).\n\n\n\n\n\n\n\n\n\n\n\nBook | GitHub"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Slides: Software development - good practices, tips & tools",
    "section": "",
    "text": "This is a index page for the “Software development - good practices, tips & tools” training Quarto slides collection."
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "Slides: Software development - good practices, tips & tools",
    "section": "Slides:",
    "text": "Slides:\n\nslides day 1\nslides day 2\nslides day 3\nslides day 4\nslides day 5\nslides day 6"
  }
]